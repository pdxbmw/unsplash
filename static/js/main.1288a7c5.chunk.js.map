{"version":3,"sources":["services/api.js","store/index.js","components/ImageGrid.js","components/SearchInput.js","components/App.js","reportWebVitals.js","index.js"],"names":["requestOptions","headers","Authorization","process","cache","searchImagesByName","query","a","url","UNSPLASH_SEARCH_URL","URLSearchParams","fetch","response","json","data","results","useStore","create","set","images","error","loading","term","Placeholder","text","className","Image","alt","src","useState","visible","setVisible","onLoad","ImageGrid","state","length","map","item","alt_description","urls","small","id","SearchInput","searchTerm","setSearchTerm","useEffect","onSubmit","e","preventDefault","htmlFor","aria-label","autoComplete","name","value","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1288a7c5.chunk.js","sourcesContent":["export const UNSPLASH_ACCESS_KEY = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\nexport const UNSPLASH_BASE_URL = 'https://api.unsplash.com/';\nexport const UNSPLASH_SEARCH_URL = UNSPLASH_BASE_URL + 'search/photos';\n\n// Options to send with each request.\nconst requestOptions = {\n  headers: {\n    Authorization: `Client-ID ${UNSPLASH_ACCESS_KEY}`\n  }\n};\n\n// Simple cache object to eliminate redundant API calls.\n// TODO: Use a more robust cache mechanism.\nconst cache = {};\n\n/**\n * Perform async search for images; cache results.\n *\n * @param {string} query Query string search term.\n * @return {object} The search results.\n */\nexport const searchImagesByName = async query => {\n  const url = UNSPLASH_SEARCH_URL + '?' + new URLSearchParams({ query });\n\n  // Only request if not stored in cache.\n  if (!cache[url]) {\n    const response = await fetch(url, requestOptions);\n    const data = await response.json();\n    cache[url] = data?.results;\n  }\n\n  return cache[url];\n};\n","import create from 'zustand';\nimport { searchImagesByName } from 'services/api';\n\nexport const useStore = create(set => ({\n  images: [],\n  error: false,\n  loading: false,\n  fetch: async term => {\n    set({ loading: true });\n\n    try {\n      const images = await searchImagesByName(term);\n\n      set({ images, error: false, loading: false });\n    } catch {\n      set({ error: true, loading: false });\n    }\n  }\n}));\n\nexport default useStore;\n","import { useState } from 'react';\nimport useStore from 'store';\nimport './ImageGrid.css';\n\nconst Placeholder = ({ text }) => (\n  <div className=\"image-grid-message\">{text}</div>\n);\n\nconst Image = ({ alt, src }) => {\n  const [visible, setVisible] = useState(false);\n  const handleLoad = () => setVisible(true);\n\n  return (\n    <img\n      className={`image-grid-item ${visible ? 'visible' : 'hidden'}`}\n      alt={alt}\n      src={src}\n      onLoad={handleLoad}\n    />\n  );\n};\n\nfunction ImageGrid() {\n  const error = useStore(state => state.error);\n  const images = useStore(state => state.images);\n  const loading = useStore(state => state.loading);\n\n  if (error) return <Placeholder text=\"Problem fetching images\" />;\n  if (loading) return <Placeholder text=\"Loading images...\" />;\n  if (!images?.length) return <Placeholder text=\"No images\" />;\n\n  return (\n    <div className=\"image-grid\">\n      {images?.map(item => (\n        <Image\n          alt={item?.alt_description}\n          key={item?.id}\n          src={item?.urls?.small}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ImageGrid;\n","import { useEffect, useState } from 'react';\nimport useStore from 'store';\nimport './SearchInput.css';\n\nfunction SearchInput() {\n  const fetch = useStore(state => state.fetch);\n  const [searchTerm, setSearchTerm] = useState('');\n  const handleInputChange = e => setSearchTerm(e.target.value);\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    return false;\n  };\n\n  useEffect(() => {\n    fetch(searchTerm);\n  }, [fetch, searchTerm]);\n\n  return (\n    <div className=\"search\">\n      <form className=\"search-form\" onSubmit={handleFormSubmit}>\n        <label\n          className=\"search-label\"\n          htmlFor=\"search-input\"\n          aria-label=\"Search input\"\n        >\n          Search for Pictures:\n        </label>\n        <input\n          autoComplete=\"off\"\n          className=\"search-input\"\n          name=\"search-input\"\n          value={searchTerm}\n          onChange={handleInputChange}\n        ></input>\n      </form>\n    </div>\n  );\n}\n\nexport default SearchInput;\n","import ImageGrid from './ImageGrid';\nimport SearchInput from './SearchInput';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SearchInput />\n      <ImageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'assets/styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}